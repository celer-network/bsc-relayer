// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package model

import (
	"context"
)

const getBBCStatus = `-- name: GetBBCStatus :one
select network_id, height, bbc_vals_hash, bsc_vals_hash, stake_mod_seq, synced_at from bbc_status
where network_id = $1
`

func (q *Queries) GetBBCStatus(ctx context.Context, networkID uint64) (BbcStatus, error) {
	row := q.db.QueryRowContext(ctx, getBBCStatus, networkID)
	var i BbcStatus
	err := row.Scan(
		&i.NetworkID,
		&i.Height,
		&i.BbcValsHash,
		&i.BscValsHash,
		&i.StakeModSeq,
		&i.SyncedAt,
	)
	return i, err
}

const initBBCStatus = `-- name: InitBBCStatus :exec
insert into bbc_status (
    network_id,height,bbc_vals_hash,bsc_vals_hash
) values (
    $1,$2,$3,$4
) on conflict do nothing
`

type InitBBCStatusParams struct {
	NetworkID   uint64
	Height      uint64
	BbcValsHash string
	BscValsHash string
}

func (q *Queries) InitBBCStatus(ctx context.Context, arg InitBBCStatusParams) error {
	_, err := q.db.ExecContext(ctx, initBBCStatus,
		arg.NetworkID,
		arg.Height,
		arg.BbcValsHash,
		arg.BscValsHash,
	)
	return err
}

const updateAfterSync = `-- name: UpdateAfterSync :exec
update bbc_status
    set synced_at = $2
where network_id = $1
`

type UpdateAfterSyncParams struct {
	NetworkID uint64
	SyncedAt  uint64
}

func (q *Queries) UpdateAfterSync(ctx context.Context, arg UpdateAfterSyncParams) error {
	_, err := q.db.ExecContext(ctx, updateAfterSync, arg.NetworkID, arg.SyncedAt)
	return err
}

const updateBBCValsHash = `-- name: UpdateBBCValsHash :exec
update bbc_status
    set bbc_vals_hash = $2
where network_id = $1
`

type UpdateBBCValsHashParams struct {
	NetworkID   uint64
	BbcValsHash string
}

func (q *Queries) UpdateBBCValsHash(ctx context.Context, arg UpdateBBCValsHashParams) error {
	_, err := q.db.ExecContext(ctx, updateBBCValsHash, arg.NetworkID, arg.BbcValsHash)
	return err
}

const updateBSCValsHash = `-- name: UpdateBSCValsHash :exec
update bbc_status
    set bsc_vals_hash = $2,
    stake_mod_seq = $3
where network_id = $1
`

type UpdateBSCValsHashParams struct {
	NetworkID   uint64
	BscValsHash string
	StakeModSeq uint64
}

func (q *Queries) UpdateBSCValsHash(ctx context.Context, arg UpdateBSCValsHashParams) error {
	_, err := q.db.ExecContext(ctx, updateBSCValsHash, arg.NetworkID, arg.BscValsHash, arg.StakeModSeq)
	return err
}

const updateHeight = `-- name: UpdateHeight :exec
update bbc_status
    set height = $2
where network_id = $1
`

type UpdateHeightParams struct {
	NetworkID uint64
	Height    uint64
}

func (q *Queries) UpdateHeight(ctx context.Context, arg UpdateHeightParams) error {
	_, err := q.db.ExecContext(ctx, updateHeight, arg.NetworkID, arg.Height)
	return err
}
