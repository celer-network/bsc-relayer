package relayer

import (
	"bytes"
	"strconv"
	"time"

	"github.com/celer-network/bsc-relayer/common"
	"github.com/celer-network/bsc-relayer/executor"
	"github.com/celer-network/bsc-relayer/model"
	"github.com/celer-network/goutils/log"
	common2 "github.com/ethereum/go-ethereum/common"
)

var header36647110 = common2.Hex2Bytes("df1e0af40e0abc020a02080a121442696e616e63652d436861696e2d47616e67657318c6e1bc11220c0881e5ef9f0610898ddedd0130de907c3a480a208c003d30b25653c4da6ee1b98e4016be5a01a3a2cfa6bf1c6085446e278220d012240801122070cac0a3c218b95a285654344c18b3b59c9809773314559f897b2107d706086c422037e2f57fd5bf10428ca5ad2a366e76fd6bb03b615d6772a328aaea48b8c3c49c5220dfb10d5c6390b8d4c63cdeffc6a27ebae82ccd0aa0f87cac8de3a1d9776f11535a20dfb10d5c6390b8d4c63cdeffc6a27ebae82ccd0aa0f87cac8de3a1d9776f11536220294d8fbd0b94b767a7eba9840f299a3586da7fe6b5dead3b7eecba193c400f936a203f62ccfa03c1484dcb27e572697791bd51d0255eb3736aa57ad288c0889a859a820114b3727172ce6473bc780298a2d66c12f1a14f5b2a12b20c0a480a20650d47dabf8b8c73ff146af9ff33390776277e885e2afa929cb439fdf7d8a9bb122408011220fe26031c16477b02abae5ec5cf8819678bb7694bead93923019547b067667bfc120012b901080210c6e1bc1122480a20650d47dabf8b8c73ff146af9ff33390776277e885e2afa929cb439fdf7d8a9bb122408011220fe26031c16477b02abae5ec5cf8819678bb7694bead93923019547b067667bfc2a0c0883e5ef9f0610e4e6bbf602321418e69cc672973992bb5f76d049a5b2c5ddf7743638014240056ade4fecc2ff8467cf72e9d3dc28dcf7dad9b8bd4024ea423a17b12f6d71bf90933f0e92aaba99368940c9a0e037cab6277e770e16e8a41a3f53289d251d0e12b901080210c6e1bc1122480a20650d47dabf8b8c73ff146af9ff33390776277e885e2afa929cb439fdf7d8a9bb122408011220fe26031c16477b02abae5ec5cf8819678bb7694bead93923019547b067667bfc2a0c0883e5ef9f0610a0acdbf6023214344c39bb8f4512d6cab1f6aafac1811ef9d8afdf3802424063ff683fc10b817cb58c72b7a47f01cfd1b67b1ef6ca3f035b67c66075387765191741d20e70394f458c3d58a6638a6d98c9f563f0efe2b73a31e1f4e4dc7e07120012b901080210c6e1bc1122480a20650d47dabf8b8c73ff146af9ff33390776277e885e2afa929cb439fdf7d8a9bb122408011220fe26031c16477b02abae5ec5cf8819678bb7694bead93923019547b067667bfc2a0c0883e5ef9f061095a6b7ea02321462633d9db7ed78e951f79913fdc8231aa77ec12b380442408d6d43838538c31747e17ec7879bfae1dea6a9a57400397c2c9581d80896b8cf6952571354b7ae08ceee97120f9bb2f1924df1e4774bcc95c33b70969ab76b0312b901080210c6e1bc1122480a20650d47dabf8b8c73ff146af9ff33390776277e885e2afa929cb439fdf7d8a9bb122408011220fe26031c16477b02abae5ec5cf8819678bb7694bead93923019547b067667bfc2a0c0883e5ef9f0610d7dae7f602321491844d296bd8e591448efc65fd6ad51a888d58fa38054240530dce5238b2a87f3d9a4430262a39b3ae6de76e8e0ca32581cb65f5e968dc6a38c1836509602d4a3e9582d715ffb275a265f4050dc7f700956ea053b730c80312b901080210c6e1bc1122480a20650d47dabf8b8c73ff146af9ff33390776277e885e2afa929cb439fdf7d8a9bb122408011220fe26031c16477b02abae5ec5cf8819678bb7694bead93923019547b067667bfc2a0c0883e5ef9f0610b0aac7e80232149ccddd479c0ad8dcd01d754dd95fe15384e8bbdc380642402562d375414f80da658ba1afcee5d4ad1eeb60bc93ab449d18225a044fb51c7df4b3416a2f24efce32dc4022f36d86508da6785f603ef831adea7ae02445760b1200120012b901080210c6e1bc1122480a20650d47dabf8b8c73ff146af9ff33390776277e885e2afa929cb439fdf7d8a9bb122408011220fe26031c16477b02abae5ec5cf8819678bb7694bead93923019547b067667bfc2a0c0883e5ef9f0610d6d6d6ea023214d4cecef238e778c7063552c3a7ab95da35c3fb4738094240124ee835809434a2e5f1063d649ef539e4586c2130d141e4fcbc32536062095cbf25ae7d59cf9d6d415b2dcbc69b2897f1fc67c711e5a9fd125b6e207b82b20112b901080210c6e1bc1122480a20650d47dabf8b8c73ff146af9ff33390776277e885e2afa929cb439fdf7d8a9bb122408011220fe26031c16477b02abae5ec5cf8819678bb7694bead93923019547b067667bfc2a0c0883e5ef9f0610e0a2d9d9023214f15ab82564d6f450ca6f30a074568a5e6dee7b9b380a4240a350132187508dac7d7380896e67330b68fcbd1868e56965e37db90ab4b873bcfe8baae2bd26ea374a6d04b7a9fc9f5e02c2b9934f4bc19f86674a785ede2d0f12b901080210c6e1bc1122480a20650d47dabf8b8c73ff146af9ff33390776277e885e2afa929cb439fdf7d8a9bb122408011220fe26031c16477b02abae5ec5cf8819678bb7694bead93923019547b067667bfc2a0c0883e5ef9f0610b982d8e8023214f42f1d05ac568d12e26b9655395e7fbbd46bc5bb380b42401572c8486ae6f3d5197caccff43f34bae0a4b1220585168a0204004b9e01e99102625ec11d85d7c4714c8dcffd5527606944e2c59e3b4c091b70ac4460c9cd0e12f1070a4b0a1406fd60078eb4c2356137dd50036597db267cf61612251624de6420e17cbe9c20cdcfdf876b3b12978d3264a007fcaaa71c4cdb701d9ebc0323f44f1880a094a58d1d2080a094a58d1d0a4b0a1418e69cc672973992bb5f76d049a5b2c5ddf7743612251624de6420184e7b103d34c41003f9b864d5f8c1adda9bd0436b253bb3c844bc739c1e77c91880a094a58d1d2080a094a58d1d0a4b0a14344c39bb8f4512d6cab1f6aafac1811ef9d8afdf12251624de64204d420aea843e92a0cfe69d89696dff6827769f9cb52a249af537ce89bf2a4b741880a094a58d1d2080a094a58d1d0a4b0a1437ef19af29679b368d2b9e9de3f8769b3578667612251624de6420bd03de9f8ab29e2800094e153fac6f696cfa512536c9c2f804dcb2c2c4e4aed61880a094a58d1d2080a094a58d1d0a4b0a1462633d9db7ed78e951f79913fdc8231aa77ec12b12251624de64208f4a74a07351895ddf373057b98fae6dfaf2cd21f37a063e19601078fe470d531880a094a58d1d2080a094a58d1d0a4b0a1491844d296bd8e591448efc65fd6ad51a888d58fa12251624de6420c80e9abef7ff439c10c68fe8f1303deddfc527718c3b37d8ba6807446e3c827a1880a094a58d1d2080a094a58d1d0a4f0a149ccddd479c0ad8dcd01d754dd95fe15384e8bbdc12251624de64204d1be64f0e9a466c2e66a53433928192783e29f8fa21beb2133499b5ef770f601880c0a8ca9a3a2080808dc2e0a2fdffff010a4b0a14b3727172ce6473bc780298a2d66c12f1a14f5b2a12251624de64209142afcc691b7cc05d26c7b0be0c8b46418294171730e079f384fde2fa50bafc1880a094a58d1d2080a094a58d1d0a4b0a14b6f20c7faa2b2f6f24518fa02b71cb5f4a09fba312251624de642049b288e4ebbb3a281c2d546fc30253d5baf08993b6e5d295fb787a5b314a298e1880a094a58d1d2080a094a58d1d0a4b0a14d4cecef238e778c7063552c3a7ab95da35c3fb4712251624de642099308aa365c40554bc89982af505d85da95251445d5dd4a9bb37dd2584fd92d31880a094a58d1d2080a094a58d1d0a4b0a14f15ab82564d6f450ca6f30a074568a5e6dee7b9b12251624de6420df33205d0974d06f3f5d32e6fd98e5debd7ec39a796455f93c63aeef0dadb31a1880c0a8ca9a3a2080c0a8ca9a3a0a4b0a14f42f1d05ac568d12e26b9655395e7fbbd46bc5bb12251624de642001776920ff0b0f38d78cf95c033c21adf7045785114e392a7544179652e0a6121880a094a58d1d2080a094a58d1d124f0a149ccddd479c0ad8dcd01d754dd95fe15384e8bbdc12251624de64204d1be64f0e9a466c2e66a53433928192783e29f8fa21beb2133499b5ef770f601880c0a8ca9a3a2080808dc2e0a2fdffff011af1070a4b0a1406fd60078eb4c2356137dd50036597db267cf61612251624de6420e17cbe9c20cdcfdf876b3b12978d3264a007fcaaa71c4cdb701d9ebc0323f44f1880a094a58d1d2080a094a58d1d0a4b0a1418e69cc672973992bb5f76d049a5b2c5ddf7743612251624de6420184e7b103d34c41003f9b864d5f8c1adda9bd0436b253bb3c844bc739c1e77c91880a094a58d1d2080a094a58d1d0a4b0a14344c39bb8f4512d6cab1f6aafac1811ef9d8afdf12251624de64204d420aea843e92a0cfe69d89696dff6827769f9cb52a249af537ce89bf2a4b741880a094a58d1d2080a094a58d1d0a4b0a1437ef19af29679b368d2b9e9de3f8769b3578667612251624de6420bd03de9f8ab29e2800094e153fac6f696cfa512536c9c2f804dcb2c2c4e4aed61880a094a58d1d2080a094a58d1d0a4b0a1462633d9db7ed78e951f79913fdc8231aa77ec12b12251624de64208f4a74a07351895ddf373057b98fae6dfaf2cd21f37a063e19601078fe470d531880a094a58d1d2080a094a58d1d0a4b0a1491844d296bd8e591448efc65fd6ad51a888d58fa12251624de6420c80e9abef7ff439c10c68fe8f1303deddfc527718c3b37d8ba6807446e3c827a1880a094a58d1d2080a094a58d1d0a4f0a149ccddd479c0ad8dcd01d754dd95fe15384e8bbdc12251624de64204d1be64f0e9a466c2e66a53433928192783e29f8fa21beb2133499b5ef770f601880c0a8ca9a3a2080808dc2e0a2fdffff010a4b0a14b3727172ce6473bc780298a2d66c12f1a14f5b2a12251624de64209142afcc691b7cc05d26c7b0be0c8b46418294171730e079f384fde2fa50bafc1880a094a58d1d2080a094a58d1d0a4b0a14b6f20c7faa2b2f6f24518fa02b71cb5f4a09fba312251624de642049b288e4ebbb3a281c2d546fc30253d5baf08993b6e5d295fb787a5b314a298e1880a094a58d1d2080a094a58d1d0a4b0a14d4cecef238e778c7063552c3a7ab95da35c3fb4712251624de642099308aa365c40554bc89982af505d85da95251445d5dd4a9bb37dd2584fd92d31880a094a58d1d2080a094a58d1d0a4b0a14f15ab82564d6f450ca6f30a074568a5e6dee7b9b12251624de6420df33205d0974d06f3f5d32e6fd98e5debd7ec39a796455f93c63aeef0dadb31a1880c0a8ca9a3a2080c0a8ca9a3a0a4b0a14f42f1d05ac568d12e26b9655395e7fbbd46bc5bb12251624de642001776920ff0b0f38d78cf95c033c21adf7045785114e392a7544179652e0a6121880a094a58d1d2080a094a58d1d124f0a149ccddd479c0ad8dcd01d754dd95fe15384e8bbdc12251624de64204d1be64f0e9a466c2e66a53433928192783e29f8fa21beb2133499b5ef770f601880c0a8ca9a3a2080808dc2e0a2fdffff01")
var msgFor1733 = common2.Hex2Bytes("000000000000000000000000000000000000000000000000000008e1bc9bf04000f9028b80f90287f846941284214b9b9c85549ab3d2b972df0deef66ac2c9946ddf42a51534fc98d0c0a3b42c963cace8441ddf9477f066f3fb515bb97015e4b4afddbcb25c94286b863a79e31a06b2f84694a2959d3f95eae5dc7d70144ce1b73b403b7eb6e0948081ef03f1d9e0bb4a5bf38f16285c879299f07f940ce09b38374887cb564b7efa60be130d99ed5f958634396b4d74cff84694b71b214cb885500844365e95cd9942c7276e7fd894d22ca3ba2141d23adab65ce4940eb7665ea2b6a794748c284f46ab87fd492326f1e2fe731d22ad2db3862c883c110c10f84694980a75ecd1309ea12fa2ed87a8744fbfc9b863d594cc6ac05c95a99c1f7b5f88de0e3486c82293b2709407eecf36cf0901fefe4bc505d6ba03c7480c7b57862bb8b2be9df3f8469435552c16704d214347f29fa77f77da6d75d7c75294dc4973e838e3949c77aced16ac2315dc2d7ab11194f57d36e129881a3a13a024fe8072507e5b2e70f8862b52882254abf84694f474cf03cceff28abc65c9cbae594f725c80e12d94e61a183325a18a173319dd8e19c8d069459e217594ddfcaedf9bb451098c9917a45f02bd61342cca6686185341bfab86f8469496c5d20b2a975c050e4220be276ace4892f4b41a9496c5d20b2a975c050e4220be276ace4892f4b41a94d83534ce35b13f84f54d11fa1d433dee3c75f9f9860e81cd624942f84694c5d15ef572d27f4f3087e17ee9099b760b1151c294c5d15ef572d27f4f3087e17ee9099b760b1151c294749678d00a66b8a820d92ad6131f3dcd47a91321860100f3a059c0f845946d6247501b822fd4eaa76fcb64baea360279497f941e481301b8c32d6a3d318b54aad7bc4a5c2b1caa94f6001c9d74e1ba71769f0633f6d690febd9b970b85ea4c276f00")
var proofFor1733 = common2.Hex2Bytes("0a84060a066961766c3a76120e00000100610800000000000006c51ae905e7050ae4050a2c080f10ac4f18c6e1bc1122206dbbc25bbb1e725c2128fd27aca6c2f01214a35b4198f77dcd53ce4876fce94d0a2c080e10a62618c6e1bc112220659c705958bb2e7b06c169ce217161dea38375e8e083b5e8a692ca11bc8596a40a2c080d10941218c6e1bc11222046b901f9068f952268e3dbfdb72954b78b90c2ce14757934f76d07601fc9f8af0a2c080c10d70b18c6e1bc112a203298b03d872ee48bd66a8b57c6c23bf6c4dd4b0142f1a1384dac03124aa4343c0a2c080b10920818c6e1bc112220ff0dc31de2fca920a4140ba3de827e2dbdaeb7ba553ae4b07f35b9e023e7bea50a2c080a10920418c6e1bc1122202440798090528dfa52f65fcf7485c1abd82c01415a4e1f42dccdb74c41060ff80a2c080910920218c6e1bc112220de10985ce05b98f3d64683d1b5e0cb7bbcd46f1008bbf05c5236404ef7f6c6bf0a2c080810920118c6e1bc11222016a5b5c7745e4c0e85691264cdb181a2a0fdf8c3312f364c442889a4efc94c260a2b0807105218c6e1bc112220c52b24da586e113b532c4cefabcecf4a12a9e8dd9b0315e240af2fd875496c890a2b0806103218c6e1bc1122201efdd90ce73fb1c410e5f3173df6494f4322df431a540cb32972b03db45141bb0a2b0805101218c6e1bc1122202499bd1a49e30c2c595d184ddd96a763eef7d9abf3c4d89a2bf6db18bf64aaca0a2b0804100a18c6e1bc11222064fed245a406a30222ef126a83903ac3f8086c7d0bc349f318a712651a7619030a2b0803100618c6e1bc1122209c3d15827439377d3fc5e1bf7e476824b971589a98838f8ed61749c3d115646d0a2b0802100418c6e1bc112220e328c7f0ec295c05a20e64f45f2c450b8920874454a946909729ea9810025f710a2b0801100218c6e1bc112220020c653e1b176c2f1e04b6b48ef593f8b37e6575ecc9e80afb153eb0c54010a01a370a0e00000100610800000000000006c51220b31fa164eafeb60527ccd3c3e2174eb4ac8436f2364becf0adadaa4b25b0487518c6e1bc110ab1060a0a6d756c746973746f726512036962631a9d069b060a98060a390a0c7374616b655f72657761726412290a2708c6e1bc11122051728bee3e249faf3d3961bad626b27d28ef850900080f1bc49d5da8ae1aaea90a300a03676f7612290a2708c6e1bc1112209ec52456da0f878dbc7070d650e728bb8efa3cfcf7578a2822efe4e519ca3f830a300a0369626312290a2708c6e1bc111220922494778ad8e7c0d2ea0f986626eb40ab6ecbf7179a00ae112c7f6aab704a560a300a0361636312290a2708c6e1bc1112209ba4b575f4869635db0205afb3186b9bc4106c40d174ea26b1264b07988077c30a330a06746f6b656e7312290a2708c6e1bc111220b19c4b0458dffa6ce947441c46caded89a772f548c03f524f49ff926d2173a330a330a0662726964676512290a2708c6e1bc1112208ac15f258b9c05d02a525b620849ffb6db34bd0230730041d1791bf0c7cb22b90a0f0a046d61696e12070a0508c6e1bc110a360a0974696d655f6c6f636b12290a2708c6e1bc1112209094c71319a18c11c2a218c0827be8131dd3b8aeccc1848de9ecf5114513e2a90a0e0a0376616c12070a0508c6e1bc110a2f0a02736312290a2708c6e1bc11122072907da76fe5d1bc2aeb2df528b07d2bca618d68938f987374b0786e0cd290680a300a0364657812290a2708c6e1bc111220961593607d865ee74a27271267f51023a3809497736ef86c7576a336f31a76100a320a057374616b6512290a2708c6e1bc111220f2aa30e3e426dd34a21b0e5a018717dcacaa54ffd1f9c2d9173efc39313fdcf60a320a05706169727312290a2708c6e1bc111220000393af0e81db9044a54af8cfed59d74fe15c309a00867ff97cf06fb75e47670a350a08736c617368696e6712290a2708c6e1bc111220ef9eceff7768bc687de691224ecdab1cb47c50a8590475e2e6af27d3ed9f7e180a110a066f7261636c6512070a0508c6e1bc110a380a0b61746f6d69635f7377617012290a2708c6e1bc111220ef41d4cf90bf23bf5e5e89fd533bc06c95a050fe6ba7f58d379cd0993c52fdb60a330a06706172616d7312290a2708c6e1bc111220db9a4440e34c6975caf0fa8f7832fe620f8fd8c623b070000bcdd443f0beb4fd")

var bbcValidatorHash = common2.Hex2Bytes("dfb10d5c6390b8d4c63cdeffc6a27ebae82ccd0aa0f87cac8de3a1d9776f1153")
var bscValidatorHash = common2.Hex2Bytes("05ed92dab8ad5fc62ecbd7513892ec9b50d4f9d20242360b2b56ef22233afcb5")

var validHeight = map[uint64]bool{36647110: true}
var seqs = map[uint64]uint64{36647110: 1733}
var headers = map[uint64][]byte{36647110: header36647110}
var msgs = map[uint64][]byte{1733: msgFor1733}
var proofs = map[uint64][]byte{1733: proofFor1733}

type mockRelayer struct {
	height   uint64
	bbcHash  []byte
	bscHash  []byte
	sequence uint64
	syncedAt uint64
}

var _ Relayer = &mockRelayer{}

func NewMockRelayer() Relayer {
	return newMockRelayer()
}

// a mock relayer on testnet
func newMockRelayer() *mockRelayer {
	return &mockRelayer{
		height:   36647110,
		bbcHash:  bbcValidatorHash,
		bscHash:  bscValidatorHash,
		sequence: 1733,
		syncedAt: 0,
	}
}

func (m *mockRelayer) SetupInitialState(height string, bbcHash, bscHash []byte) {
	h, err := strconv.Atoi(height)
	if err == nil && validHeight[uint64(h)] {
		m.height = uint64(h)
		m.sequence = seqs[m.height]
	}
	if len(bbcHash) != 0 {
		m.bbcHash = bbcHash
	}
	if len(bscHash) != 0 {
		m.bscHash = bscHash
	}
}

func (m *mockRelayer) NewCallback2WithBSCHashCheck(callback RelayCrossChainPackageCallbackFunc) RelayCrossChainPackageCallbackFunc {
	return func(pkg *executor.CrossChainPackage) {
		bscChanged, newBscHash, _ := executor.FindBscValidatorSetChangePackage(m.bscHash, []*executor.CrossChainPackage{pkg})
		if bscChanged {
			m.bscHash = newBscHash
			callback(pkg)
		}
	}
}

func (m *mockRelayer) MonitorStakingModule(callback1 SyncBBCHeaderCallbackFunc, callback2 RelayCrossChainPackageCallbackFunc) {
	log.Infof("Start mock monitor all packages in channel 8 from height %d, current bbc vals hash %x, bsc vals hash %x",
		m.height, m.bbcHash, m.bscHash)
	time.Sleep(3 * time.Second)
	h0 := new(common.Header)
	err := common.Cdc.UnmarshalBinaryLengthPrefixed(headers[m.height], h0)
	if err != nil {
		panic(err)
	}
	if !bytes.Equal(m.bbcHash, bbcValidatorHash) {
		m.bbcHash = bbcValidatorHash
	}
	callback1(h0)

	time.Sleep(time.Second)
	callback2(&executor.CrossChainPackage{
		Height:    m.height,
		ChannelID: 8,
		Sequence:  m.sequence,
		Msg:       msgs[m.sequence],
		Proof:     proofs[m.sequence],
	})
}

func (m *mockRelayer) GetBBCStatus() (model.BbcStatus, error) {
	return model.BbcStatus{
		NetworkID:   0,
		Height:      m.height,
		BbcValsHash: common2.Bytes2Hex(m.bbcHash),
		BscValsHash: common2.Bytes2Hex(m.bscHash),
		StakeModSeq: m.sequence,
		SyncedAt:    m.syncedAt,
	}, nil
}

func (m *mockRelayer) UpdateAfterSync(height uint64) error {
	m.syncedAt = height
	return nil
}
